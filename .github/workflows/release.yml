name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

env:
  GHCR_REGISTRY: ghcr.io
  DOCKER_HUB_REGISTRY: docker.io
  IMAGE_NAME: lindehoff/spellbuddy
  # Add placeholder API key for build
  OPENAI_API_KEY: sk-placeholder-key-for-build-process
  OPENAI_MODEL: gpt-4o-mini
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  test:
    uses: ./.github/workflows/ci.yml

  release:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      release_created: ${{ steps.release.outputs.release_created }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Verify project integrity
        run: npm run test-release

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            RELEASE_OUTPUT=$(npx semantic-release --dry-run)
            if echo "$RELEASE_OUTPUT" | grep -q "The next release version is"; then
              VERSION=$(echo "$RELEASE_OUTPUT" | grep "The next release version is" | sed 's/.*The next release version is \([0-9.]*\).*/\1/')
            else
              VERSION=$(npm pkg get version | tr -d '"')
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version to be released: $VERSION"

      - name: Create Release
        id: release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if npx semantic-release; then
            echo "release_created=true" >> $GITHUB_OUTPUT
          else
            echo "release_created=false" >> $GITHUB_OUTPUT
          fi

      - name: Update GitHub Release
        if: steps.release.outputs.release_created == 'true' || github.ref_type == 'tag'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          files: |
            LICENSE
            README.md
          body: |
            ## üöÄ Release v${{ steps.get_version.outputs.version }}
            
            ### üê≥ Docker Images
            The following Docker image tags are available for this release:

            **GitHub Container Registry:**
            ```bash
            ghcr.io/lindehoff/spellbuddy:${{ steps.get_version.outputs.version }}
            ghcr.io/lindehoff/spellbuddy:latest
            ```

            **Docker Hub:**
            ```bash
            lindehoff/spellbuddy:${{ steps.get_version.outputs.version }}
            lindehoff/spellbuddy:latest
            ```
            
            ### üì¶ Installation
            To install this version, run:
            ```bash
            ./manage-container.sh upgrade --force-version v${{ steps.get_version.outputs.version }}
            ```
            
            ### üîÑ Automatic Updates
            The application will automatically check for updates and notify administrators through the admin dashboard.

  docker:
    needs: release
    if: needs.release.outputs.release_created == 'true' || github.ref_type == 'tag'
    uses: ./.github/workflows/docker-build.yml
    with:
      version: ${{ needs.release.outputs.version }}
      push_image: true
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }} 